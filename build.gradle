/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
  }
  dependencies {
    classpath "org.vert-x:build-tools:$vertxBuildToolsVersion"
    classpath "org.vert-x:gradle-plugin:$vertxGradlePluginVersion"
  }
}

apply from: 'gradle/setup.gradle'
apply plugin: 'java'
// apply plugin: 'vertx' // configures the test classpath correctly and adds busmod packaging
// apply plugin: 'vertx-rhino'

configurations {
	vertxProvided {
		visible = false
		transitive = false
	}
}

defaultTasks = ['assemble']

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

jar.enabled = false // we don't need this

repositories {
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}

dependencies {
  compile "org.mongodb:mongo-java-driver:$mongoVersion"
  vertxProvided("org.vert-x:vertx-core:$vertxVersion")
  vertxProvided("org.vert-x:vertx-platform:$vertxVersion")

  testCompile("org.vert-x:vertx-core:$vertxVersion")
  testCompile("org.vert-x:vertx-platform:$vertxVersion")
  testCompile("org.vert-x:vertx-lang-java:$vertxVersion")
  testCompile("org.vert-x:vertx-lang-rhino:$vertxVersion")
  testCompile("org.mozilla:rhino:$rhinoVersion")

  testCompile("org.vert-x:vertx-testframework:$vertxVersion") {
    transitive = false // don't need all of the other language deps
  }

  testCompile "junit:junit:$junitVersion"
}

sourceSets.main.compileClasspath = sourceSets.main.compileClasspath.plus configurations.vertxProvided
sourceSets.main.runtimeClasspath = sourceSets.main.runtimeClasspath.minus configurations.vertxProvided
sourceSets.test.compileClasspath = sourceSets.test.compileClasspath.plus configurations.vertxProvided

test {
  systemProperty 'vertx.test.timeout', 15
  systemProperty 'vertx.mods', "$projectDir/build/tmp/mod-test"
  systemProperty 'vertx.version', "$project.version"
  testLogging.showStandardStreams = true
}

test.classpath = test.classpath.minus sourceSets.main.runtimeClasspath

task prepareVertxModule(type: Copy) {
    description = "Assembles a vert.x module in the build/mod/${project.name.replaceFirst('mod-', '')} dir"
    dependsOn assemble
    destinationDir = project.file("build/mod/${project.modulename}-v${project.version}")

	from(project.configurations.runtime) { into 'lib' }
    from 'build/classes/main'
    from 'build/resources/main'
    from 'src/main/conf'
}

task packageVertxModule(type: Zip, dependsOn: ['prepareVertxModule']) {
	group = 'vert.x'
	description = "Assembles a vert.x module in 'mod.zip' format"
	destinationDir = project.file('build/libs')
	archiveName = 'mod.zip'
	from project.file("build/mod")
}

task prepareVertxTest(type: Sync, dependsOn: ['prepareVertxModule']) {
  from 'build/mod'
  into 'build/tmp/mod-test'
}
test.dependsOn prepareVertxTest

task collectDeps(type: Copy) {
  group = 'vert.x'
  description = 'conveniently collect dependencies for other IDEs'
  destinationDir = file("build/deps")
  into("compile") {
    from configurations.compile
  }
  into("test") {
    from configurations.testCompile
  }
}

task dist(dependsOn: ['packageVertxModule']) {
  group = 'vert.x'
  description = "prepare a distributable busmod 'mod.zip' package"
}
